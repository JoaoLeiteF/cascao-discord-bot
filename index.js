const path = require('path');
const fs = require('fs');

// Carregar vari√°veis de ambiente manualmente
const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const lines = envContent.split('\n');
    
    lines.forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
            const value = valueParts.join('=').trim();
            if (value) {
                process.env[key.trim()] = value;
            }
        }
    });
    console.log('Arquivo .env carregado com sucesso');
} else {
    console.log('Arquivo .env n√£o encontrado em:', envPath);
}

console.log('DISCORD_TOKEN carregado:', process.env.DISCORD_TOKEN ? 'Sim' : 'N√£o');

const { Client, GatewayIntentBits } = require('discord.js');
const { DisTube } = require('distube');
const config = require('./config');
const ffmpegStatic = require('ffmpeg-static');
const { joinVoiceChannel, createAudioPlayer, createAudioResource } = require('@discordjs/voice');

// Configura√ß√£o do bot
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildPresences,
        GatewayIntentBits.GuildMembers
    ]
});

// Configura√ß√£o do DisTube (vers√£o atualizada)
let distube;
try {
    // Adiciona o diret√≥rio do FFmpeg ao PATH do processo
    const ffmpegDir = ffmpegStatic.replace(/\\ffmpeg\.exe$/, '');
    if (!process.env.PATH.includes(ffmpegDir)) {
        process.env.PATH = ffmpegDir + ';' + process.env.PATH;
    }
    console.log('FFmpeg path adicionado ao PATH:', ffmpegDir);
    console.log('PATH atual:', process.env.PATH);
    
    distube = new DisTube(client, {
        emitNewSongOnly: true,
        emitAddSongWhenCreatingQueue: false,
        emitAddListWhenCreatingQueue: false,
        nsfw: false
    });
    console.log('DisTube inicializado com sucesso!');
} catch (error) {
    console.error('Erro ao inicializar DisTube:', error);
    console.error('Para resolver o problema do FFmpeg:');
    console.error('1. Baixe FFmpeg de: https://ffmpeg.org/download.html');
    console.error('2. Extraia para C:\\ffmpeg');
    console.error('3. Adicione C:\\ffmpeg\\bin ao PATH do sistema');
    process.exit(1);
}

// Evento quando o bot fica online
client.once('ready', () => {
    console.log(`Bot conectado como ${client.user.tag}!`);
    
    client.user.setPresence({
        activities: [{ name: 'm√∫sicas üéµ', type: 2 }], // type: 2 = LISTENING
        status: 'online',
    });
    
    console.log('Bot online e pronto para tocar m√∫sica!');
});

// Evento para escutar mensagens
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    // Comando para tocar m√∫sica
    if (message.content.toLowerCase().includes('toca aquela')) {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.reply('‚ùå Voc√™ precisa estar em um canal de voz para usar o bot de m√∫sica!');
        }

        const musicQuery = extractMusicQuery(message.content);
        
        if (!musicQuery) {
            return message.reply('üéµ Por favor, digite: "Toca aquela [nome da m√∫sica]"');
        }

        try {
            message.reply('üîç Procurando e tocando a m√∫sica...');
            console.log(`Tentando tocar: "${musicQuery}"`);
            
            // Verifica se √© uma URL v√°lida ou termo de pesquisa
            let searchQuery = musicQuery;
            
            // Se n√£o for uma URL, adiciona "youtube" para melhorar a pesquisa
            if (!musicQuery.startsWith('http') && !musicQuery.startsWith('www')) {
                searchQuery = `youtube ${musicQuery}`;
                console.log(`Pesquisa modificada para: "${searchQuery}"`);
            }
            
            // Verifica se j√° existe uma fila ativa
            const existingQueue = distube.getQueue(message.guildId);
            if (existingQueue && existingQueue.voiceChannel.id !== voiceChannel.id) {
                // Se h√° uma fila em outro canal, para ela primeiro
                await distube.stop(message.guildId);
                console.log('Fila anterior parada para conectar ao novo canal');
            }
            
            // DisTube toca diretamente
            const result = await distube.play(voiceChannel, searchQuery, {
                textChannel: message.channel,
                member: message.member
            });
            
            console.log('Resultado do play:', result);
            
        } catch (error) {
            console.error('Erro ao tocar m√∫sica:', error);
            console.error('Detalhes do erro:', error.message);
            
            if (error.message.includes('FFMPEG_NOT_INSTALLED')) {
                message.reply('‚ùå FFmpeg n√£o est√° instalado. Baixe de https://ffmpeg.org/download.html');
            } else if (error.message.includes('This url is not supported')) {
                message.reply('‚ùå URL n√£o suportada. Tente usar apenas o nome da m√∫sica ou um link do YouTube v√°lido.');
            } else if (error.message.includes('No video found')) {
                message.reply('‚ùå Nenhum v√≠deo encontrado. Verifique o nome da m√∫sica ou link.');
            } else if (error.message.includes('Video unavailable')) {
                message.reply('‚ùå V√≠deo indispon√≠vel. Tente outro nome ou link.');
            } else if (error.message.includes('Sign in')) {
                message.reply('‚ùå V√≠deo com restri√ß√£o de idade. Tente outro nome.');
            } else if (error.message.includes('Private video')) {
                message.reply('‚ùå V√≠deo privado. Tente outro nome.');
            } else if (error.message.includes('Cannot connect to the voice channel')) {
                message.reply('‚ùå Erro de conex√£o com o canal de voz. Tente:\n1. Verificar se o bot tem permiss√µes\n2. Reconectar ao canal\n3. Usar `casc√£o entrar` primeiro');
            } else if (error.message.includes('Missing Permissions')) {
                message.reply('‚ùå Bot sem permiss√µes. Precisa de:\n‚Ä¢ Conectar\n‚Ä¢ Falar\n‚Ä¢ Usar VAD\n‚Ä¢ Ver Canais');
            } else {
                message.reply(`‚ùå Erro ao tocar m√∫sica: ${error.message}`);
            }
        }
    }

    // Comando para entrar no canal
    if (message.content.toLowerCase() === 'casc√£o entrar' || message.content.toLowerCase() === 'bot entrar') {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const voiceChannel = message.member.voice.channel;
        
        if (!voiceChannel) {
            return message.reply('‚ùå Voc√™ precisa estar em um canal de voz primeiro!');
        }

        // Verifica permiss√µes do bot
        const permissions = voiceChannel.permissionsFor(client.user);
        if (!permissions.has('Connect')) {
            return message.reply('‚ùå N√£o tenho permiss√£o para conectar ao canal de voz!');
        }
        if (!permissions.has('Speak')) {
            return message.reply('‚ùå N√£o tenho permiss√£o para falar no canal de voz!');
        }

        const queue = distube.getQueue(message.guildId);
        if (queue) {
            return message.reply('üîä J√° estou conectado e tocando m√∫sica!');
        }

        try {
            // Tenta conectar ao canal para verificar se funciona
            // DisTube se conecta automaticamente quando toca m√∫sica
            message.reply(`üîä Pronto para tocar m√∫sica no canal: **${voiceChannel.name}**!\nUse: \`Toca aquela [nome da m√∫sica]\``);
        } catch (error) {
            console.error('Erro ao conectar:', error);
            message.reply('‚ùå Erro ao conectar ao canal. Verifique as permiss√µes e tente novamente.');
        }
    }

    // Comandos de controle
    if (message.content.toLowerCase() === 'parar musica' || message.content.toLowerCase() === 'parar') {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const queue = distube.getQueue(message.guildId);
        if (queue) {
            await distube.stop(message.guildId);
            message.reply('‚èπÔ∏è M√∫sica parada e fila limpa!');
        } else {
            message.reply('‚ùå N√£o h√° nenhuma m√∫sica tocando!');
        }
    }

    if (message.content.toLowerCase() === 'pausar') {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const queue = distube.getQueue(message.guildId);
        if (queue) {
            if (queue.paused) {
                await distube.resume(message.guildId);
                message.reply('‚ñ∂Ô∏è M√∫sica retomada!');
            } else {
                await distube.pause(message.guildId);
                message.reply('‚è∏Ô∏è M√∫sica pausada!');
            }
        } else {
            message.reply('‚ùå N√£o h√° nenhuma m√∫sica tocando!');
        }
    }

    if (message.content.toLowerCase() === 'pular' || message.content.toLowerCase() === 'skip') {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const queue = distube.getQueue(message.guildId);
        if (queue) {
            await distube.skip(message.guildId);
            message.reply('‚è≠Ô∏è M√∫sica pulada!');
        } else {
            message.reply('‚ùå N√£o h√° nenhuma m√∫sica tocando!');
        }
    }

    if (message.content.toLowerCase() === 'sair do canal' || message.content.toLowerCase() === 'casc√£o sair') {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const queue = distube.getQueue(message.guildId);
        if (queue) {
            await distube.stop(message.guildId);
            message.reply('üëã Saindo do canal de voz!');
        } else {
            message.reply('‚ùå N√£o estou em nenhum canal de voz!');
        }
    }

    // Comando de ajuda
    if (message.content.toLowerCase() === 'casc√£o ajuda' || message.content.toLowerCase() === 'bot ajuda') {
        const helpMessage = `
üéµ **Comandos do Casc√£o - Bot de M√∫sica**

**üé∂ M√∫sica:**
\`Toca aquela [nome/link]\` - Tocar m√∫sica
\`parar\` - Parar m√∫sica e limpar fila
\`pausar\` - Pausar/Retomar m√∫sica
\`pular\` - Pular m√∫sica atual

**üîä Controles:**
\`casc√£o entrar\` - Entrar no canal
\`sair do canal\` - Sair do canal
\`casc√£o ajuda\` - Mostrar comandos

**üîß Teste:**
\`teste distube\` - Testar se DisTube est√° funcionando
\`teste url [URL]\` - Testar se uma URL √© v√°lida
\`casc√£o permiss√µes\` - Verificar permiss√µes do bot

**üí° Dicas:**
‚Ä¢ Use apenas o nome da m√∫sica (ex: "Toca aquela despacito")
‚Ä¢ Para links, use apenas YouTube v√°lidos
‚Ä¢ Evite links de playlists ou canais
        `;
        
        message.reply(helpMessage);
    }

    // Comando para ver o que est√° tocando
    if (message.content.toLowerCase() === 'tocando agora' || message.content.toLowerCase() === 'np') {
        if (!distube) {
            return message.reply('‚ùå Bot de m√∫sica n√£o est√° dispon√≠vel. Verifique se FFmpeg est√° instalado.');
        }
        
        const queue = distube.getQueue(message.guildId);
        if (queue) {
            const song = queue.songs[0];
            message.reply(`üéµ **Tocando agora:** ${song.name}\n‚è±Ô∏è **Dura√ß√£o:** ${song.formattedDuration}\nüë§ **Solicitado por:** ${song.user}`);
        } else {
            message.reply('‚ùå Nenhuma m√∫sica est√° tocando no momento!');
        }
    }

    // Comando de teste para verificar DisTube
    if (message.content.toLowerCase() === 'teste distube') {
        if (!distube) {
            return message.reply('‚ùå DisTube n√£o est√° dispon√≠vel.');
        }
        
        try {
            message.reply('üîç Testando DisTube...');
            console.log('DisTube status:', distube);
            console.log('DisTube options:', distube.options);
            message.reply('‚úÖ DisTube est√° funcionando! Verifique o console para mais detalhes.');
        } catch (error) {
            console.error('Erro no teste DisTube:', error);
            message.reply(`‚ùå Erro no teste: ${error.message}`);
        }
    }

    // Comando para testar URL espec√≠fica
    if (message.content.toLowerCase().startsWith('teste url')) {
        if (!distube) {
            return message.reply('‚ùå DisTube n√£o est√° dispon√≠vel.');
        }
        
        const testUrl = message.content.replace('teste url', '').trim();
        if (!testUrl) {
            return message.reply('‚ùå Use: `teste url [URL ou nome da m√∫sica]`');
        }
        
        try {
            message.reply(`üîç Testando: "${testUrl}"`);
            console.log(`Testando URL: "${testUrl}"`);
            
            // Tenta fazer uma pesquisa simples para ver se funciona
            const result = await distube.search(testUrl, { limit: 1 });
            console.log('Resultado da pesquisa:', result);
            
            if (result && result.length > 0) {
                message.reply(`‚úÖ URL v√°lida! Encontrado: ${result[0].name}`);
            } else {
                message.reply('‚ùå Nenhum resultado encontrado para esta URL/termo.');
            }
        } catch (error) {
            console.error('Erro no teste de URL:', error);
            message.reply(`‚ùå Erro ao testar URL: ${error.message}`);
        }
    }

    // Comando para verificar permiss√µes do bot
    if (message.content.toLowerCase() === 'casc√£o permiss√µes' || message.content.toLowerCase() === 'bot permiss√µes') {
        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.reply('‚ùå Voc√™ precisa estar em um canal de voz primeiro!');
        }

        const permissions = voiceChannel.permissionsFor(client.user);
        const requiredPermissions = ['Connect', 'Speak', 'UseVAD', 'ViewChannel'];
        
        const permissionStatus = requiredPermissions.map(perm => {
            const hasPerm = permissions.has(perm);
            return `${hasPerm ? '‚úÖ' : '‚ùå'} ${perm}`;
        }).join('\n');

        message.reply(`üîê **Permiss√µes do bot no canal ${voiceChannel.name}:**\n${permissionStatus}`);
    }
});

// Eventos do DisTube
if (distube) {
    distube
        .on('playSong', (queue, song) => {
            queue.textChannel?.send(`üéµ **Tocando:** ${song.name} - \`${song.formattedDuration}\`\nüë§ **Solicitado por:** ${song.user}`);
        })
        .on('addSong', (queue, song) => {
            queue.textChannel?.send(`‚úÖ **Adicionado √† fila:** ${song.name} - \`${song.formattedDuration}\`\nüë§ **Solicitado por:** ${song.user}`);
        })
        .on('playList', (queue, playlist, song) => {
            queue.textChannel?.send(`üéµ **Tocando playlist:** ${playlist.name} (${playlist.songs.length} m√∫sicas)\nüéµ **M√∫sica atual:** ${song.name}`);
        })
        .on('addList', (queue, playlist) => {
            queue.textChannel?.send(`‚úÖ **Playlist adicionada:** ${playlist.name} (${playlist.songs.length} m√∫sicas)`);
        })
        .on('searchResult', (message, result) => {
            let i = 0;
            const embed = {
                title: '**Escolha uma op√ß√£o:**',
                description: result.map(song => `**${++i}**. ${song.name} - \`${song.formattedDuration}\``).join('\n'),
                color: 0x00ff00
            };
            message.channel.send({ embeds: [embed] });
        })
        .on('searchCancel', (message) => {
            message.channel.send('‚ùå Pesquisa cancelada!');
        })
        .on('error', (channel, e) => {
            console.error('Erro DisTube:', e);
            channel?.send('‚ùå Erro ao tocar m√∫sica!');
        });
}

// Fun√ß√£o para extrair nome da m√∫sica
function extractMusicQuery(message) {
    const phrases = ['toca aquela', 'toca aquela'];
    let query = message.toLowerCase();
    
    for (const phrase of phrases) {
        if (query.includes(phrase)) {
            query = query.replace(phrase, '').trim();
            break;
        }
    }
    
    return query || null;
}

client.on('error', console.error);

// ATEN√á√ÉO: Substitua pelo seu token!
client.login(config.DISCORD_TOKEN);